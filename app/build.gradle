plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.github.triplet.play'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs'
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

android {
    compileSdkVersion 31

    defaultConfig {
        def commitCount = Integer.parseInt('git rev-list --count HEAD'.execute([], project.rootDir).text.trim())+50
        def last_tag_commit = "git rev-list --tags --max-count=1".execute([], project.rootDir).text.trim()
        def last_tag = "git describe --tags ${last_tag_commit}".execute([], project.rootDir).text.trim().replace("_", " ")
        applicationId "dev.keader.correiostracker"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode commitCount
        versionName last_tag

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation": "$projectDir/schemas".toString()
                ]
            }
        }
    }

    signingConfigs {
        release {
            def password = System.getenv("APP_KEYSTORE_PASSWORD")
            def alias = System.getenv("APP_KEYSTORE_ALIAS")
            def signFile = rootProject.file("keadertracker.jks")

            storeFile signFile
            storePassword password
            keyAlias alias
            keyPassword password
        }
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [crashlyticsEnabled: true]
        }

        debug {
            applicationIdSuffix '.debug'
            manifestPlaceholders = [crashlyticsEnabled: false]
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

play {
    track.set("production")
    serviceAccountCredentials.set(file("publish_key.json"))
}

dependencies {
    implementation project(path: ':CorreiosAPI')
    implementation project(path: ':SharedAPIObjects')

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.core:core-ktx:1.7.0-beta02"
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"

    // Lottie Animation
    implementation "com.airbnb.android:lottie:$lottie_version"

    // Room Database
    implementation "androidx.room:room-runtime:$room_version"
    implementation 'com.google.android.play:core-ktx:1.8.1'
    implementation 'androidx.paging:paging-runtime-ktx:3.1.0'
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation("androidx.room:room-paging:2.4.0-beta02")

    // Timber Logs
    implementation "com.jakewharton.timber:timber:$timber_version"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // Life Cycle
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.lifecycle:lifecycle-common-java8:2.3.1"

    // Hilt
    implementation 'com.google.dagger:hilt-android:2.38.1'
    kapt 'com.google.dagger:hilt-android-compiler:2.38.1'
    // Hilt-Worker
    implementation 'androidx.hilt:hilt-work:1.0.0'
    kapt 'androidx.hilt:hilt-compiler:1.0.0'

    // Worker
    implementation "androidx.work:work-runtime-ktx:$work_version"

    // DataStore
    implementation("androidx.datastore:datastore-preferences:1.0.0")
    implementation("androidx.datastore:datastore-preferences-core:1.0.0")

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:28.4.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-messaging-ktx'

    // Tap Target View
    implementation "com.getkeepsafe.taptargetview:taptargetview:$tapTargetView_version"

    // Preferences
    implementation 'androidx.preference:preference-ktx:1.1.1'

    // Camerax
    implementation "androidx.camera:camera-core:$camerax_version"
    implementation "androidx.camera:camera-camera2:$camerax_version"
    implementation "androidx.camera:camera-lifecycle:$camerax_version"
    implementation "androidx.camera:camera-view:$camerax_ext_version"
    implementation "androidx.camera:camera-extensions:$camerax_ext_version"

    // MLKit
    implementation 'com.google.android.gms:play-services-mlkit-text-recognition:17.0.0'
    implementation 'com.google.android.gms:play-services-mlkit-barcode-scanning:16.2.1'

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    // OkHttp
    implementation "com.squareup.okhttp3:okhttp:$okHttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttp_version"

    // Gson
    implementation "com.google.code.gson:gson:$gson_version"

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    kapt 'com.github.bumptech.glide:compiler:4.12.0'

    // Tests
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
}

task buildNotes {
    doFirst {
        try {
            def branch = 'git rev-parse --abbrev-ref HEAD'.execute([], project.rootDir).text.trim()
            if (branch == "main") {
                def lastTag = "git describe --abbrev=0".execute([], project.rootDir).text.trim()
                def tagMessage = "git tag -l --format=%(contents) ${lastTag}".execute([], project.rootDir).text.trim()
                def production = new File(project.rootDir, "app/src/main/play/release-notes/pt-BR/production.txt")
                production.createNewFile()
                production.text = tagMessage
            } else if (branch == "development") {
                def message = "git log -1 --pretty=%B".execute([], project.rootDir).text.trim().split(":").reverse()[0]
                def internal = new File(project.rootDir, "app/src/main/play/release-notes/pt-BR/internal.txt")
                internal.createNewFile()
                internal.text = message
            }
        } catch (Exception ignored) {
            System.err.println("No git installed on the machine or not on a git repo. CorreiosTracker will not generate release notes")
        }
    }
}

afterEvaluate {
    def publish = tasks.findByName("publishReleaseBundle")
    if (publish != null) {
        publish.configure {
            dependsOn("buildNotes")
        }
    }
}

